// <auto-generated />
using System;
using Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace App.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    partial class ApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("identity")
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Database.Entity.AccessRecordEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_utc");

                    b.Property<DateTime>("ExpiresUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expires_utc");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasMaxLength(39)
                        .HasColumnType("character varying(39)")
                        .HasColumnName("ip");

                    b.Property<long>("RefreshRecordId")
                        .HasColumnType("bigint")
                        .HasColumnName("refresh_record_id");

                    b.Property<string>("UserAgent")
                        .IsRequired()
                        .HasMaxLength(2056)
                        .HasColumnType("character varying(2056)")
                        .HasColumnName("user_agent");

                    b.HasKey("Id")
                        .HasName("pk_access_record");

                    b.HasIndex("RefreshRecordId")
                        .HasDatabaseName("ix_access_record_refresh_record_id");

                    b.ToTable("access_record", "identity");
                });

            modelBuilder.Entity("Database.Entity.LoginRecordEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_utc");

                    b.Property<DateTime?>("InvalidatedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("invalidated_utc");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasMaxLength(39)
                        .HasColumnType("character varying(39)")
                        .HasColumnName("ip");

                    b.Property<string>("OAuthJson")
                        .IsRequired()
                        .HasMaxLength(1048576)
                        .HasColumnType("jsonb")
                        .HasColumnName("o_auth_json");

                    b.Property<string>("UserAgent")
                        .IsRequired()
                        .HasMaxLength(2056)
                        .HasColumnType("character varying(2056)")
                        .HasColumnName("user_agent");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_login_record");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_login_record_user_id");

                    b.ToTable("login_record", "identity");
                });

            modelBuilder.Entity("Database.Entity.OldInformationRecordEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Information")
                        .IsRequired()
                        .HasMaxLength(2056)
                        .HasColumnType("character varying(2056)")
                        .HasColumnName("information");

                    b.Property<DateTime>("ReplacedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("replaced_utc");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_old_information_record_entity");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_old_information_record_entity_user_id");

                    b.ToTable("old_information_record_entity", "identity");
                });

            modelBuilder.Entity("Database.Entity.RefreshRecordEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_utc");

                    b.Property<DateTime>("ExpiresUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expires_utc");

                    b.Property<DateTime?>("InvalidatedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("invalidated_utc");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasMaxLength(39)
                        .HasColumnType("character varying(39)")
                        .HasColumnName("ip");

                    b.Property<long>("LoginRecordId")
                        .HasColumnType("bigint")
                        .HasColumnName("login_record_id");

                    b.Property<string>("UserAgent")
                        .IsRequired()
                        .HasMaxLength(2056)
                        .HasColumnType("character varying(2056)")
                        .HasColumnName("user_agent");

                    b.HasKey("Id")
                        .HasName("pk_refresh_record");

                    b.HasIndex("LoginRecordId")
                        .HasDatabaseName("ix_refresh_record_login_record_id");

                    b.ToTable("refresh_record", "identity");
                });

            modelBuilder.Entity("Database.Entity.UserEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("AuthenticationProvider")
                        .HasColumnType("integer")
                        .HasColumnName("authentication_provider");

                    b.Property<string>("AvatarUrl")
                        .IsRequired()
                        .HasMaxLength(2056)
                        .HasColumnType("character varying(2056)")
                        .HasColumnName("avatar_url");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_utc");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)")
                        .HasColumnName("email");

                    b.Property<string>("ProviderId")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)")
                        .HasColumnName("provider_id");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("pk_user");

                    b.HasIndex("ProviderId", "AuthenticationProvider")
                        .IsUnique()
                        .HasDatabaseName("ix_user_provider_id_authentication_provider");

                    b.ToTable("user", "identity");
                });

            modelBuilder.Entity("Database.Entity.AccessRecordEntity", b =>
                {
                    b.HasOne("Database.Entity.RefreshRecordEntity", "RefreshRecord")
                        .WithMany("AccessRecords")
                        .HasForeignKey("RefreshRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_access_record_refresh_record_refresh_record_id");

                    b.Navigation("RefreshRecord");
                });

            modelBuilder.Entity("Database.Entity.LoginRecordEntity", b =>
                {
                    b.HasOne("Database.Entity.UserEntity", "User")
                        .WithMany("LoginRecords")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_login_record_user_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Database.Entity.OldInformationRecordEntity", b =>
                {
                    b.HasOne("Database.Entity.UserEntity", "User")
                        .WithMany("OldInformationRecords")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_old_information_record_entity_user_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Database.Entity.RefreshRecordEntity", b =>
                {
                    b.HasOne("Database.Entity.LoginRecordEntity", "LoginRecord")
                        .WithMany("RefreshRecords")
                        .HasForeignKey("LoginRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_refresh_record_login_record_login_record_id");

                    b.Navigation("LoginRecord");
                });

            modelBuilder.Entity("Database.Entity.LoginRecordEntity", b =>
                {
                    b.Navigation("RefreshRecords");
                });

            modelBuilder.Entity("Database.Entity.RefreshRecordEntity", b =>
                {
                    b.Navigation("AccessRecords");
                });

            modelBuilder.Entity("Database.Entity.UserEntity", b =>
                {
                    b.Navigation("LoginRecords");

                    b.Navigation("OldInformationRecords");
                });
#pragma warning restore 612, 618
        }
    }
}
